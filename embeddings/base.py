# embeddings/base.py
from abc import ABC, abstractmethod
from typing import List, Dict, Any


class BaseEmbeddingProvider(ABC):
    """Abstract base class for embedding providers"""

    @abstractmethod
    def generate_embedding(self, text: str) -> List[float]:
        """Generate vector embedding for the given text"""
        pass

    @abstractmethod
    def get_embedding_dimension(self) -> int:
        """Get the dimension of embeddings generated by this provider"""
        pass

    @abstractmethod
    def get_provider_name(self) -> str:
        """Get the name of the embedding provider"""
        pass


class BaseVectorizer(ABC):
    """Abstract base class for vectorizers that process resume data"""

    @abstractmethod
    def generate_resume_embeddings(self, resume_data: Dict) -> Dict:
        """Generate embeddings for searchable fields in resume"""
        pass

    @abstractmethod
    def generate_total_resume_text(self, resume_data: Dict) -> str:
        """Generate a comprehensive text representation of the entire resume"""
        pass
